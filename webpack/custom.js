// 常见构建工具以及对比

// 构建工具【工程化、自动化】
/**
1. 代码转换
2. 文件优化
3. 代码分割
4. 模块合并
5. 自动刷新
6. 代码校验
7. 自动发布

1. 转换代码，将TypeScript代码转换成为JS，ES6转换成为ES5，SCSS转换成为CSS；
2. 文件优化；转换后的文件进行压缩，图片合并；
3. 提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载；
4. 在采用模块化的项目里会有很很多个模块和文件，需要构建功能把模块分类合并成一个文件；
5. 监听本地源代码的变化，自动重新构建、刷新浏览器；
6. 代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过；
7. 更新完代码之后，自动构建出线上发布代码并传输给发布、系统；
*/

// OTHERS：

// NPM script（Nodejs包管理器NPM内置功能，允许在package.json文件中使用scripts字段定义任务；）
// ---- 功能太简单；不能方便管理多个任务之间的依赖；;

// Grunt（封装了大量现成的插件，封装了常见的任务，也能管理任务之间的依赖关系，自动执行依赖的任务，每个任务具体执行代码和依赖关系写在配置文件Gruntfile.js里面；）
// ---- 集成度不高，需要些很多配置，没法做到开箱即用；

// Gulp （基于流的自动化构建工具；除了管理和执行任务，还支持监听文件、读写文件。设计简单；引入了流的概念，提供了一系列常用的插件处理流）
// ---- Grunt的加强版；相对于Grunt，添加了监听文件、读写文件、流式处理的功能；

// Fis3（集成了Grunt、Gulp这些只提供基本功能的工具，集成了WEB常用构建功能；读写文件、资源定位、文件指纹、文件编译、压缩资源、图片合并）
// ---- （官方不再更新和维护，不支持最新版本的Node.js）

// Webpack（打包模块化，一切文件皆模块，通过loader转换文件，通过plugin注入钩子；最后输出由多个模块组合成的文件；专注构建模块化项目）
// ---- 一切皆文件，专注处理模块化项目；做到开箱即用，一步到位；
// ---- 通过plugin扩展，完整好用又不失灵活；
// ---- 社区庞大活跃，紧跟时代发展新特性；
// ---- 良好的开发体验；
// ---- 只能采用模块化开发项目；

// Rollup(Webpack流行后出现的替代品；生态链不完善；配置和使用更加简单；不支持Code Spliting；打包出来的代码中没有Webpack那段模块的加载、执行和缓存的代码)
// ---- 对ES6源码进行Tree shaking以去除被定义但是没有被使用的代码，以及Scope Hoisting以减少输出文件大小提升运行性能；


// 大多数团队在开发新项目时采用紧跟时代的技术，技术几乎都会采用模块化+新语言；
// webpack为新项目提供一站式解决方案；
// 良好的生态链和维护团队，能提供良好的开发体验和保证质量；
// webpack被全世界的大量web开发者使用和验证，找到各个层面所需的教程和经验分享；

